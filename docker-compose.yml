services:
  # ---------------------- Database (MariaDB) ----------------------
  db:
    image: mariadb:11.4
    container_name: lms_db
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-root}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-lms_tg_app}
      TZ: Asia/Seoul
    volumes:
      - dbdata:/var/lib/mysql
      - ./init.sql:/docker-entrypoint-initdb.d/001-init.sql:ro
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "mariadb -h 127.0.0.1 -uroot -p$${MYSQL_ROOT_PASSWORD} -e 'SELECT 1' >/dev/null 2>&1 || exit 1",
        ]
      interval: 5s
      timeout: 5s
      retries: 60
      start_period: 30s
    restart: unless-stopped
    networks: [app_net]

  # ---------------------- Redis (queues, cache) ----------------------
  redis:
    image: redis:7-alpine
    container_name: lms_redis
    command: ["redis-server", "--appendonly", "yes"]
    ports:
      - "6379:6379"
    volumes:
      - redisdata:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: unless-stopped
    networks: [app_net]

  # ---------------------- MinIO (object storage) ----------------------
  minio:
    image: minio/minio:latest
    container_name: lms_minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin}
      TZ: Asia/Seoul
    ports:
      - "9000:9000" # S3 API
      - "9001:9001" # Web Console
    volumes:
      - minio_data:/data
    restart: unless-stopped
    networks: [app_net]

  # ---------------------- Adminer (DB UI) ----------------------
  adminer:
    image: adminer:4
    container_name: lms_adminer
    environment:
      ADMINER_DEFAULT_SERVER: db
    ports:
      - "8080:8080"
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    networks: [app_net]

  # ---------------------- Backend (App) ----------------------
  backend:
    image: ghcr.io/nutonflashorg/lms_tg_app:staging
    container_name: lms_backend
    pull_policy: always
    env_file: [.env.local]
    environment:
      TZ: Asia/Seoul
      DATABASE_URL: mysql://root:${MYSQL_ROOT_PASSWORD:-root}@db:3306/${MYSQL_DATABASE:-lms_tg_app}
      REDIS_HOST: redis
      MINIO_ENDPOINT: minio
      MINIO_PORT: "9000"
      MINIO_USE_SSL: "false"
      MINIO_ACCESS_KEY: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_SECRET_KEY: ${MINIO_ROOT_PASSWORD:-minioadmin}
      MINIO_BUCKET_PUBLIC: ${MINIO_BUCKET_PUBLIC:-public}
      MINIO_BUCKET_PRIVATE: ${MINIO_BUCKET_PRIVATE:-private}
    ports:
      - "3000:3000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
      minio:
        condition: service_started
    command: ["node", "dist/index.cjs"]
    healthcheck:
      test:
        [
          "CMD-SHELL",
          'node -e "fetch(''http://localhost:3000/health'').then(r=>process.exit(r.ok?0:1)).catch(()=>process.exit(1))"',
        ]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 15s
    restart: on-failure
    networks: [app_net]

# ---------------------- Volumes & Network ----------------------
volumes:
  dbdata:
  redisdata:
  minio_data:

networks:
  app_net:
    driver: bridge
